# import binascii
import struct

req_adu = b'\xc1\xb1\x00\x00\x00\x06\x01\x03\x00\x00\x00\x14'
# ab=b"\xc1\xf7\x00\x00\x00k\x01\x03h\x00\x00'\x88\x00\x00'\x88\x00\x00'\x88\x00\x00'\x88\x00\x00'\x88\x00\x00'\x88\x00\x00'\x88\x00\x00'\x88\x00\x00'\x88\x00\x00'\x88\x00\x00'\x88\x00\x00'\x88\x00\x00'\x88\x00\x00'\x88\x00\x00'\x88\x00\x00'\x88\x00\x00'\x88\x00\x00'\x88\x00\x00'\x88\x00\x00'\x88\x00\x00\x00\x07\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x048\x00\x00\x02X\x00\x00\x00\x00"
# resp_pdu=ab[7:]

response_error_adu = b'\xc1\xb1\x00\x00\x00+\x01\x03('
response_remainder = b'\x00\x00\x14\x01\x00\x00\x00e\x00\x00\x00\x15\x80\x00\x04A\x00\x00\x00\x00\x00\x1b\xb7\xf0\x00\x00\x00\x00\x00\x00\x03\xef\x00\x00\x00\x00\x00\x00\x00\x00'
resp_adu = response_error_adu + response_remainder
# resp_pdu = resp_adu[7:]
resp_pdu = b'\x03(\x00\x00\x14\x01\x00\x00\x00e\x00\x00\x00\x15\x80\x00\x04A\x00\x00\x00\x00\x00\x1b\xba\x0e\x00\x00\x00\x00\x00\x00\x03\xef\x00\x00\x00\x00\x00\x00\x00\x00'
req_pdu = b'N\xb4\x00\x00\x00\x06\x01\x03\x00\x00\x00\x14'
quantity = struct.unpack('>H', req_pdu[-2:])[0]
byte_count = struct.unpack('>B', resp_pdu[1:2])[0]

fmt = '>' + ('B' * byte_count)
bytes_ = struct.unpack(fmt, resp_pdu[2:])

data = list()

for i, value in enumerate(bytes_):
    padding = 8 if (quantity - (8 * i)) // 8 > 0 \
        else quantity % 8

    fmt = '{{0:0{padding}b}}'.format(padding=padding)

    # Create binary representation of integer, convert it to a list
    # and reverse the list.
    data = data + [int(i) for i in fmt.format(value)][::-1]
print(data)
